import fs from 'fs';
import path from 'path';

const localesDir = path.join(process.cwd(), 'messages');
// Use 'en' as the reference locale to find all namespaces
// Assumes all namespaces exist in 'en' directory
const referenceLocaleDir = path.join(localesDir, 'en');
const outputDir = path.join(process.cwd(), 'app', 'i18n', 'generated');
const outputFile = path.join(outputDir, 'namespaces.ts');

console.log('[i18n] Starting namespace manifest generation...');

try {
  if (!fs.existsSync(referenceLocaleDir)) {
    console.error(`[i18n] Error: Reference locale directory not found at ${referenceLocaleDir}`);
    console.error('[i18n] Please ensure messages/en directory exists and contains your namespace files.');
    process.exit(1);
  }

  const files = fs.readdirSync(referenceLocaleDir);
  const namespaces = files
    .filter(file => file.endsWith('.json'))
    .map(file => file.replace('.json', ''))
    .sort();

  if (namespaces.length === 0) {
    console.warn('[i18n] Warning: No namespace files (.json) found in reference locale directory:', referenceLocaleDir);
  } else {
    console.log('[i18n] Found namespaces:', namespaces.join(', '));
  }

  const content = `// This file is auto-generated by scripts/generate-namespace-manifest.mjs
// Do not edit this file manually.

export const availableNamespaces: string[] = ${JSON.stringify(namespaces, null, 2)};
`;

  if (!fs.existsSync(outputDir)) {
    fs.mkdirSync(outputDir, { recursive: true });
    console.log(`[i18n] Created directory: ${outputDir}`);
  }

  fs.writeFileSync(outputFile, content);
  console.log(`[i18n] Namespace manifest generated successfully at ${outputFile}`);

} catch (error) {
  console.error('[i18n] Error generating namespace manifest:', error);
  process.exit(1);
} 