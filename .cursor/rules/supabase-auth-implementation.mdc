---
description: 
globs: 
alwaysApply: false
---
# Supabase OAuth Implementation Patterns

This guide documents the patterns for implementing OAuth authentication with Supabase in a Next.js application that uses internationalization (next-intl).

## Key Files

- [app/auth/callback/route.ts](mdc:app/auth/callback/route.ts) - Non-locale-prefixed callback handler
- [components/auth/SignInForm.tsx](mdc:components/auth/SignInForm.tsx) - OAuth sign-in form
- [components/auth/RegisterForm.tsx](mdc:components/auth/RegisterForm.tsx) - OAuth registration form
- [middleware.ts](mdc:middleware.ts) - Middleware that handles locale and auth
- [supabase/config.toml](mdc:supabase/config.toml) - Supabase configuration

## Implementation Strategy

### 1. Auth Callback Handling

The key to successful OAuth implementation with next-intl is having a non-locale-prefixed callback handler:

```typescript
// app/auth/callback/route.ts
export async function GET(request: Request) {
  const requestUrl = new URL(request.url)
  const code = requestUrl.searchParams.get('code')
  
  // Extract locale from referrer or set default
  let userLocale = defaultLocale;
  
  // Skip server-side code exchange
  // Instead, add the code to URL fragment for client-side handling
  const finalRedirectUrl = new URL(`/${userLocale}/`, requestUrl.origin);
  finalRedirectUrl.hash = `access_token=&refresh_token=&provider_token=&provider_refresh_token=&type=recovery&code=${code}`;
  
  return NextResponse.redirect(finalRedirectUrl);
}
```

### 2. OAuth Provider Configuration

Configure Supabase with proper redirect URLs:

```toml
# supabase/config.toml
[auth]
site_url = "http://localhost:3000"
additional_redirect_urls = [
  "http://localhost:3000",
  "http://127.0.0.1:3000",
  "http://localhost:3000/auth/callback",
  "http://localhost:54321/auth/v1/callback"
]
```

### 3. Auth UI Components

Set up OAuth providers in your auth forms:

```typescript
// components/auth/SignInForm.tsx or RegisterForm.tsx
const authOptions = {
  supabaseClient: supabase,
  view: 'sign_in', // or 'sign_up'
  providers: ['github', 'google'],
  redirectTo: `${window.location.origin}/auth/callback`,
  // ... other options
}
```

### 4. Middleware Configuration

Update middleware to bypass locale handling for auth routes:

```typescript
// middleware.ts
export async function middleware(request: NextRequest) {
  // Skip middleware for auth callback
  if (
    request.nextUrl.pathname === '/auth/callback'
  ) {
    return NextResponse.next()
  }
  
  // Handle other routes with locale
  // ...
}
```

## Database User Handling

For properly handling OAuth user profiles, create a migration:

```sql
-- Handle data from various OAuth providers
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER AS $$
DECLARE
  username_val TEXT;
  full_name_val TEXT;
  email_val TEXT;
  avatar_url_val TEXT;
BEGIN
  -- Extract email from auth.users
  SELECT email INTO email_val FROM auth.users WHERE id = NEW.id;
  
  -- Handle provider-specific metadata extraction
  IF NEW.raw_user_meta_data->>'iss' = 'https://accounts.google.com' THEN
    -- Extract Google user data
    username_val := COALESCE(
      NEW.raw_user_meta_data->>'name',
      split_part(email_val, '@', 1)
    );
    avatar_url_val := NEW.raw_user_meta_data->>'avatar_url';
  ELSIF NEW.raw_user_meta_data->>'provider' = 'github' THEN
    -- Extract GitHub user data
    username_val := COALESCE(
      NEW.raw_user_meta_data->>'preferred_username',
      NEW.raw_user_meta_data->>'user_name',
      split_part(email_val, '@', 1)
    );
    avatar_url_val := NEW.raw_user_meta_data->>'avatar_url';
  ELSE
    -- Default fallback for other providers
    username_val := COALESCE(
      NEW.raw_user_meta_data->>'preferred_username',
      NEW.raw_user_meta_data->>'name',
      split_part(email_val, '@', 1),
      'user_' || NEW.id
    );
    avatar_url_val := NEW.raw_user_meta_data->>'avatar_url';
  END IF;
  
  -- Create profile record
  INSERT INTO public.profiles (id, username, email, avatar_url, created_at, updated_at)
  VALUES (
    NEW.id,
    username_val,
    email_val,
    avatar_url_val,
    NEW.created_at,
    NEW.created_at
  );
  
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;
```

## Common Issues and Solutions

1. **PKCE Flow Issues**:
   - If getting `both auth code and code verifier should be non-empty` errors, use client-side code exchange instead of server-side.
   - Keep the callback route outside locale-prefixed paths.

2. **Cookie Domain Problems**:
   - For local development, ensure cookies don't have strict same-site policy.
   - In middleware, set cookie options appropriately:
   ```typescript
   options.sameSite = 'lax'  // Not 'strict'
   ```

3. **Auth Middleware Conflicts**:
   - Bypass internationalization middleware for auth callback paths
   - Ensure auth routes are handled before locale routes

4. **OAuth Provider Setup**:
   - Add all possible callback URLs to the `additional_redirect_urls` list
   - Use appropriate environment variables for provider credentials
   - For development, set `skip_nonce_check = true` for providers that require it

## Testing Authentication

When testing authentication:

1. Inspect network requests to identify any redirect or CORS issues
2. Check browser console for Supabase client errors
3. Examine cookies to ensure proper session storage
4. Test both sign-in and sign-up flows
5. Verify profile creation in the database after successful OAuth auth
