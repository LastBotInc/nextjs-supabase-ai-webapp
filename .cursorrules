<project>
This is a NextJS 15 / React 19 / Typescript / Tailwind CSS application with Jest and Cypress test frameworks.
</project>

<tools>
# Internal Tools: Core capabilities available directly.
run_terminal_cmd - Executes terminal commands
  - Parameters: command, is_background, explanation
codebase_search - Semantic codebase search
  - Parameters: query, explanation, target_directories
read_file - Reads file contents
  - Parameters: target_file, start_line_one_indexed, end_line_one_indexed_inclusive, should_read_entire_file, explanation
list_dir - Lists directory contents
  - Parameters: relative_workspace_path, explanation
grep_search - Fast text-based regex search within files
  - Parameters: query, case_sensitive (optional), include_pattern (optional), exclude_pattern (optional), explanation
edit_file - Propose an edit to an existing file
  - Parameters: target_file, instructions, code_edit
file_search - Fast fuzzy file path search
  - Parameters: query, explanation
delete_file - Delete a file at the specified path
  - Parameters: target_file, explanation
reapply - Calls a smarter model to apply the last edit to the specified file
  - Parameters: target_file
fetch_rules - Fetches user-provided rules (@*.mdc files)
  - Parameters: rule_names
web_search - Searches the web for information
  - Parameters: search_term, explanation
mcp_puppeteer_puppeteer_navigate - Navigate to a URL
  - Parameters: url
mcp_puppeteer_puppeteer_screenshot - Take a screenshot
  - Parameters: name, selector, width, height
mcp_puppeteer_puppeteer_click - Click an element
  - Parameters: selector
mcp_puppeteer_puppeteer_fill - Fill out an input field
  - Parameters: selector, value
mcp_puppeteer_puppeteer_select - Select an element
  - Parameters: selector, value
mcp_puppeteer_puppeteer_hover - Hover an element
  - Parameters: selector
mcp_puppeteer_puppeteer_evaluate - Execute JavaScript
  - Parameters: script
mcp_supabase_query - Run a read-only SQL query to project database
  - Parameters: sql
</tools>

<command_line_tools>
# Project-Specific Tools: Execute these using `run_terminal_cmd`.
{
  "tools": {
    "translations": {
      "description": "Tools for managing translations and localization",
      "tool": "run_terminal_cmd",
      "command": "npm run",
      "options": {
        "check-translations": "Compare English, Finnish and Swedish translation files for completeness and missing keys",
        "import-translations:local": "Import translations for local development environment",
        "import-translations:prod": "Import translations for production environment"
      }
    },
    "seed": {
      "description": "Tools for seeding development and production data",
      "tool": "run_terminal_cmd",
      "command": "npm run",
      "options": {
        "seed:users": "Seed users data for development environment",
        "seed:users:local": "Seed users data for local development",
        "seed:users:prod": "Seed users data for production environment",
        "seed:blog:local": "Seed blog data for local development",
        "seed:blog:prod": "Seed blog data for production environment"
      }
    },
    "supabase": {
      "description": "Manages Supabase database migrations, schema updates, and content seeding",
      "tool": "run_terminal_cmd",
      "command": "supabase",
      "options": {
        "migration": {
          "new": "Create a new migration file"
        },
        "db": {
          "push": "Push database migration changes",
          "reset": "Reset the database"
        },
      },
    },
    "image-optimizer": {
      "description": "Optimizes images with background removal, resizing, and format conversion using Sharp and Replicate's remove-bg model",
      "tool": "run_terminal_cmd",
      "command": "npm run optimize-image",
      "options": {
        "input": "Path to input image",
        "output": "Path to output image",
        "remove-bg": "(Optional) Remove image background using AI",
        "resize": "(Optional) Resize image (format: WIDTHxHEIGHT, e.g. 800x600)",
        "format": "(Optional) Convert to format (png, jpeg, or webp)",
        "quality": "(Optional) Set output quality (1-100, default: 80)"
      },
      "requires": [
        "REPLICATE_API_TOKEN in .env",
        "sharp package (npm install sharp)"
      ],
      "example": "npm run optimize-image -- input.png output.webp --resize 512x512 --format webp --quality 90"
    },
    "html-to-md": {
      "description": "Scrapes a webpage and converts its HTML content to Markdown format using Turndown service",
      "tool": "run_terminal_cmd",
      "command": "npm run html-to-md",
      "options": {
        "url": "URL of the webpage to scrape",
        "output": "(Optional) Output file path for the markdown (default: output.md)",
        "selector": "(Optional) CSS selector to target specific content"
      },
      "requires": [
        "Node.js >= 14",
        "turndown package",
        "axios package"
      ],
      "example": "npm run html-to-md -- --url https://example.com --output docs/scraped.md --selector main"
    },
    "gemini": {
      "description": "Interacts with Google's Gemini API for text generation, chat, multimodal tasks, document analysis, and grounded search",
      "tool": "run_terminal_cmd",
      "command": "npm run gemini",
      "options": {
        "prompt": "Text prompt or question for the model",
        "model": "(Optional) Model to use: 'gemini-2.0-flash' (default), 'gemini-2.5-pro-exp-03-25'",
        "temperature": "(Optional) Sampling temperature between 0.0 and 1.0 (default: 0.7)",
        "max-tokens": "(Optional) Maximum tokens to generate (default: 2048)",
        "image": "(Optional) Path to image file for vision tasks",
        "file": "(Optional) Path to local file (PDF, DOCX, TXT, etc.) for document analysis",
        "url": "(Optional) URL to a document to analyze (PDF, DOCX, TXT, etc.)",
        "mime-type": "(Optional) MIME type of the file (e.g., application/pdf, default: auto-detected)",
        "chat-history": "(Optional) Path to JSON file containing chat history",
        "stream": "(Optional) Stream the response (default: false)",
        "safety-settings": "(Optional) JSON string of safety threshold configurations",
        "schema": "(Optional) JSON schema for structured output",
        "json": "(Optional) Return structured JSON data. Available types: recipes, tasks, products, custom",
        "ground": "(Optional) Enable Google Search grounding for up-to-date information (default: false)",
        "show-search-data": "(Optional) Show the search entries used for grounding (default: false)"
      },
      "requires": [
        "GOOGLE_AI_STUDIO_KEY in .env",
        "@google/genai package",
        "node-fetch package"
      ],
      "example": "npm run gemini -- --prompt "What is the capital of France?" --model gemini-2.0-flash-001 --temperature 0.7",
      "advanced_examples": [
        "# Process a PDF document from a URL",
        "npm run gemini -- --prompt "Summarize this document in 5 key points" --url "https://discovery.ucl.ac.uk/id/eprint/10089234/1/343019_3_art_0_py4t4l_convrt.pdf"",
        "",
        "# Process a local PDF file",
        "npm run gemini -- --prompt "What is this document about?" --file test/data/sample.pdf",
        "",
        "# Process a text file with specific MIME type",
        "npm run gemini -- --prompt "Expand on this information" --file test/data/sample.txt --mime-type text/plain",
        "",
        "# Get grounded search results with real-time information",
        "npm run gemini -- --prompt "When is the next total solar eclipse in North America?" --ground --show-search-data",
        "",
        "# Generate structured JSON data with predefined schema (recipes)",
        "npm run gemini -- --prompt "List 3 popular cookie recipes" --json recipes",
        "",
        "# Generate structured JSON data with predefined schema (tasks)",
        "npm run gemini -- --prompt "Create a task list for planning a vacation" --json tasks",
        "",
        "# Generate structured JSON data with predefined schema (products)",
        "npm run gemini -- --prompt "List 3 smartphone models" --json products",
        "",
        "# Use a custom JSON schema for structured output",
        "npm run gemini -- --prompt "List 3 programming languages and their use cases" --json custom --schema '{"type":"array","items":{"type":"object","properties":{"language":{"type":"string"},"year":{"type":"integer"},"useCases":{"type":"array","items":{"type":"string"}}},"required":["language","useCases"]}}'"
      ]
    },
    "gemini-image": {
      "description": "Generates and edits images using Google Gemini and Imagen models",
      "tool": "run_terminal_cmd",
      "command": "node tools/gemini-image-tool.js",
      "subcommands": {
        "generate": {
          "description": "Generate an image using Gemini 2.0 or Imagen 3.0",
          "options": {
            "prompt": "Required: Text prompt for image generation",
            "model": "(Optional) Model to use: 'gemini-2.0' (default) or 'imagen-3.0'",
            "output": "(Optional) Output file path (default: gemini-generated-image.png)",
            "folder": "(Optional) Output folder path (default: public/images)",
            "num-outputs": "(Optional) Number of images (Imagen 3 only, default: 1, max: 4)",
            "negative-prompt": "(Optional) Negative prompt (Imagen 3 only)",
            "aspect-ratio": "(Optional) Aspect ratio (Imagen 3 only, default: 1:1, options: 1:1, 16:9, 9:16, 4:3, 3:4)"
          },
          "example": "node tools/gemini-image-tool.js generate -p "A futuristic car" -m imagen-3.0 -n 2 --aspect-ratio 16:9 -o car.png"
        },
        "edit": {
          "description": "Edit an existing image using Gemini 2.0",
          "options": {
            "input-image": "Required: Path to the input image",
            "edit-prompt": "Required: Text prompt describing the edit",
            "output": "(Optional) Output file path (default: gemini-edited-image.png)",
            "folder": "(Optional) Output folder path (default: public/images)"
          },
          "example": "node tools/gemini-image-tool.js edit -i input.png -p "Add sunglasses to the person" -o edited.png"
        }
      },
      "requires": [
        "GOOGLE_AI_STUDIO_KEY or GEMINI_API_KEY in .env.local",
        "@google/genai package",
        "commander package",
        "axios package",
        "dotenv package"
      ]
    },
    "download-file": {
      "description": "Downloads files from URLs with progress tracking, automatic file type detection, and customizable output paths",
      "tool": "run_terminal_cmd",
      "command": "npm run download-file",
      "options": {
        "url": "URL of the file to download",
        "output": "(Optional) Complete output path including filename",
        "folder": "(Optional) Output folder path (default: downloads)",
        "filename": "(Optional) Output filename (if not provided, derived from URL or content)"
      },
      "requires": [
        "axios package",
        "cli-progress package",
        "mime-types package"
      ],
      "example": "npm run download-file -- --url https://example.com/image.jpg --folder public/images --filename downloaded-image.jpg"
    },
    "generate-video": {
      "description": "Generates videos using various Replicate API models including Minimax, Hunyuan, Mochi, and LTX",
      "tool": "run_terminal_cmd",
      "command": "npm run generate-video",
      "options": {
        "prompt": "Text description of the desired video",
        "model": "(Optional) Model to use: minimax (default), hunyuan, mochi, or ltx",
        "duration": "(Optional) Duration of the video in seconds (model-specific limits apply)",
        "image": "(Optional) Path to input image for image-to-video generation",
        "output": "(Optional) Output filename",
        "folder": "(Optional) Output folder path (default: public/videos)"
      },
      "requires": [
        "REPLICATE_API_TOKEN in .env",
        "replicate package",
        "ora package",
        "chalk package"
      ],
      "example": "npm run generate-video -- --prompt "A serene ocean wave rolling onto a beach" --model minimax --duration 5 --output beach-wave.mp4"
    },
    "remove-background-advanced": {
      "description": "Advanced background removal tool using Sharp with color tolerance and edge detection",
      "tool": "run_terminal_cmd",
      "command": "npm run remove-background-advanced",
      "options": {
        "input": "Path to input image",
        "output": "Path to output image",
        "tolerance": "(Optional) Color tolerance for background detection (0-255, default: 30)"
      },
      "requires": ["sharp package"],
      "example": "npm run remove-background-advanced -- --input input.png --output output.png --tolerance 40"
    },
    "shopify_cli": {
      "description": "Manages Shopify themes, apps, and development stores using the Shopify CLI",
      "tool": "run_terminal_cmd",
      "command": "shopify",
      "options": {
        "login": "Log in to a Shopify account",
        "logout": "Log out of the current Shopify account",
        "switch": "Switch between different Shopify accounts or organizations",
        "whoami": "Display the current Shopify account and store",
        "theme": {
          "dev": "Start a local development server for a theme",
          "pull": "Download theme files from Shopify",
          "push": "Upload theme files to Shopify",
          "serve": "Alias for 'theme dev'",
          "list": "List themes in your store",
          "check": "Validate the theme",
          "package": "Package your theme into a .zip file",
          "publish": "Set a remote theme as the live theme"
        },
        "app": {
          "dev": "Start a local development server for an app",
          "build": "Build the app, including extensions",
          "deploy": "Deploy your Shopify app",
          "info": "Display information about your app"
        },
        "hydrogen": {
            "dev": "Runs Hydrogen storefront in an Oxygen worker for development",
            "build": "Builds a Hydrogen storefront for production",
            "deploy": "Builds and deploys a Hydrogen storefront to Oxygen"
        },
        "populate": {
          "products": "Add sample products to your store",
          "customers": "Add sample customers to your store",
          "orders": "Add sample orders to your store"
        }
      },
      "example": "shopify theme dev"
    },
    "shopify_product": {
      "description": "Manages products in a Shopify store using the Admin API (via custom app credentials).",
      "tool": "run_terminal_cmd",
      "command": "node tools/shopify-product-tool.js",
      "subcommands": {
        "get": {
          "description": "Get a product by its GID.",
          "options": {
            "id": "Required: Product GID (e.g., gid://shopify/Product/123456789)"
          },
          "example": "node tools/shopify-product-tool.js get --id gid://shopify/Product/12345"
        },
        "list": {
          "description": "List products with optional filters.",
          "options": {
            "limit": "(Optional) Number of products to list (default: 10).",
            "status": "(Optional) Filter by status (ACTIVE, ARCHIVED, DRAFT)."
          },
          "example": "node tools/shopify-product-tool.js list --limit 5 --status ACTIVE"
        },
        "create": {
          "description": "Create a new product.",
          "options": {
            "title": "Required: Product title.",
            "bodyHtml": "(Optional) Product description (HTML string).",
            "vendor": "(Optional) Product vendor.",
            "productType": "(Optional) Product type.",
            "status": "(Optional) Product status (ACTIVE, ARCHIVED, DRAFT - default: DRAFT).",
            "tags": "(Optional) Comma-separated list of tags."
          },
          "example": "node tools/shopify-product-tool.js create --title \"Awesome New Gadget\" --vendor \"GadgetCo\" --status ACTIVE"
        },
        "update": {
          "description": "Update an existing product by its GID.",
          "options": {
            "id": "Required: Product GID to update.",
            "title": "(Optional) New product title.",
            "status": "(Optional) New product status (ACTIVE, ARCHIVED, DRAFT)."
          },
          "example": "node tools/shopify-product-tool.js update --id gid://shopify/Product/12345 --title \"Even Awesomer Gadget V2\" --status ARCHIVED"
        },
        "delete": {
          "description": "Delete a product by its GID.",
          "options": {
            "id": "Required: Product GID to delete."
          },
          "example": "node tools/shopify-product-tool.js delete --id gid://shopify/Product/12345"
        },
        "generate": {
          "description": "Generate and create products using AI (Gemini for text, Imagen 3 for images).",
          "options": {
            "amount": "Required: Number of products to generate.",
            "instructions": "Required: Text instructions describing the desired products (e.g., 'vintage t-shirts', 'modern kitchen gadgets').",
            "status": "(Optional) Status for created products (ACTIVE, ARCHIVED, DRAFT - default: DRAFT).",
            "img-folder": "(Optional) Folder to save generated images (default: public/images/generated_products)."
          },
          "example": "node tools/shopify-product-tool.js generate --amount 5 --instructions \"handmade ceramic mugs with unique glazes\" --status ACTIVE"
        }
      },
      "requires": [
        "SHOPIFY_SHOP_DOMAIN in .env.local (e.g., your-store.myshopify.com)",
        "SHOPIFY_ADMIN_ACCESS_TOKEN in .env.local (Admin API token, starts with shpat_)",
        "SHOPIFY_API_KEY in .env.local (Custom App API Key)",
        "SHOPIFY_API_SECRET in .env.local (Custom App API Secret)",
        "@shopify/shopify-api package",
        "dotenv package",
        "commander package"
      ]
    }
  }
}
</command_line_tools>

<documentation>
  ## Documentation and Context Files
  Reference these files for understanding the project. Use `read_file` for `@*.md` files. Use `fetch_rules` for `@*.mdc` files.
    - `@description.md`: App description, use cases, features.
    - `@architecture.md`: Tech stack, folder structure, testing frameworks.
    - `@datamodel.md`: Entities, attributes, relationships.
    - `@frontend.md`: Views/screens, UI/UX patterns, styling.
    - `@backend.md`: API endpoints, authentication, service architecture.
    - `@todo.md`: Task list (✅ done, ⏳ in progress, ❌ not started). Update status, don't remove tasks.
    - `@ai_changelog.md`: Log of changes made by AI. Add concise summaries here.
    - `@learnings.md`: Technical learnings, best practices, error solutions. Add new findings here.
    - `/.cursor/rules/@add-data-model.mdc`: How to add a new data model.
    - `/.cursor/rules/@admin-api-protection.mdc`: How to protect the admin API.
    - `/.cursor/rules/@implement-frontend-page.mdc`: How to implement a new frontend page.
    - `/.cursor/rules/@implement-nextjs-api.mdc`: How to implement a new NextJS API route.
    - `/.cursor/rules/@implement-unit-tests.mdc`: How to implement unit tests.
    - `@package.json`: List of used npm packages and versions.
    - `lib/@brand-info.ts`: Brand information for content generation.

  **Link Handling:**
    - For `@filename.ext` links: Use `read_file` to access their content.
    - For `http://` or `https://` links: Use `web_search` to get information from the URL if needed for the task (e.g., documentation, error context). Do not assume you can directly access or parse the content without `web_search`.
</documentation>

## Core Actions & Workflow
Define high-level tasks. Follow the `## Request Processing Steps` below to execute these.

<actions>
  <use_tools>
    - **Goal:** Execute project-specific tools listed under `<command_line_tools>`.
    - **Steps:**
      1. Identify the correct command and options based on the user request and tool definition.
      2. Use `run_terminal_cmd` to execute the command.
  </use_tools>

  <document>
     - **Goal:** Update documentation files.
     - **Steps:**
       1. Read relevant documentation files (`@*.md`).
       2. Use `edit_file` to make necessary updates based on the task. Focus on the specific files mentioned in the `<documentation>` section (e.g., `ai_changelog.md`, `todo.md`, `learnings.md`).
  </document>

  <research>
  - **Goal:** Understand a task or topic thoroughly before planning.
  - **Steps:**
    1. **Gather Context:**
        - Read relevant `@*.md` files from `<documentation>`.
        - Fetch relevant `@*.mdc` rules using `fetch_rules`.
        - Use `codebase_search` to find relevant existing code snippets.
        - Use `web_search` for external information, documentation, or examples (perform at least one search).
    2. **Analyze & Plan:**
        - Synthesize gathered information.
        - Outline the plan: What needs to be done? What tools are required?
        - Identify any missing information needed from the user.
    3. **Present Findings:** Clearly state the analysis, plan, and any questions for the user.
  </research>

  <fix>
  - **Goal:** Diagnose and resolve an error.
  - **Steps:**
    1. **Gather Context:**
        - Read `docs/learnings.md` for previous solutions (`read_file`).
        - If error messages contain URLs, use `web_search` to understand them.
        - Fetch relevant `@*.mdc` rules (`fetch_rules`).
        - Use `web_search` for general error resolution information.
    2. **Iterative Fixing Loop:**
        a. **Hypothesize:** Based on context, identify 1-2 likely causes.
        b. **Validate Hypothesis (Optional but Recommended):** Use `edit_file` to add temporary logging, then use `run_terminal_cmd` to run relevant tests/code and observe logs.
        c. **Implement Fix:** Use `edit_file` to apply the proposed code change.
        d. **Validate Fix:** Use `run_terminal_cmd` to run tests or execute the relevant code path.
        e. **Record Outcome:**
            - If fixed: Update `docs/learnings.md` with the solution (`edit_file`). Delete `/temp/fix_backlog.md` if it exists (`delete_file`).
            - If not fixed: Create or update `/temp/fix_backlog.md` with what was tried (`edit_file`). Return to step (a). *Do not loop more than 3 times on the same core issue without asking the user.*
  </fix>

  <validate>
  - **Goal:** Implement and run tests, fixing any failures.
  - **Steps:**
    1. **Understand Requirements:**
        - Read `docs/architecture.md` for testing practices (`read_file`).
        - Fetch `@implement-unit-tests.mdc` rule (`fetch_rules`).
    2. **Write Unit Tests:**
        - Use `edit_file` to create/update unit test files (e.g., `__tests__/*.test.ts`).
    3. **Run & Fix Unit Tests:**
        - Execute tests using `run_terminal_cmd` (e.g., `npm test`).
        - If errors occur, use the `<fix>` action flow to resolve them.
    4. **Write E2E Tests:**
        - Use `edit_file` to create/update E2E test files (e.g., in `cypress/`).
    5. **Run & Fix E2E Tests:**
        - Execute tests using `run_terminal_cmd` (e.g., `npm run cypress:run`).
        - If errors occur, use the `<fix>` action flow to resolve them.
    6. **Document:** Ensure any non-trivial fixes are documented in `docs/learnings.md` as part of the `<fix>` action.
    7. **Repeat:** Continue until all relevant tests pass.
  </validate>

  <record>
   - **Goal:** Document completed work and update the task backlog.
   - **Steps:**
     1. Use `edit_file` to add a summary to `docs/ai_changelog.md`.
     2. Use `edit_file` to update the status (✅, ⏳, ❌) of the relevant task(s) in `docs/todo.md`. **Do not remove tasks.**
  </record>

  <design>
   - **Goal:** Design a frontend feature.
   - **Steps:**
     1. Read `docs/frontend.md` for UI/UX guidelines (`read_file`).
     2. Describe the design (components, layout, flow) and use `edit_file` to update `docs/frontend.md`.
     3. Generate required images/illustrations using `run_terminal_cmd` with appropriate image generation tools (e.g., `gemini-image`, prefer `imagen` or `gemini` models). Specify output folder like `public/images`.
     4. Optimize generated images using `run_terminal_cmd` with `image-optimizer`.
     5. Briefly summarize the design and generated assets for the user.
  </design>

  <develop>
   - **Goal:** Implement the code for a feature (frontend/backend).
   - **Steps:**
     1. Fetch relevant rules (`@implement-*.mdc`) using `fetch_rules`.
     2. Use `edit_file` to implement the required code changes across necessary files (components, API routes, types, etc.). Ensure imports and dependencies are handled.
  </develop>

  <invent>
    - **Goal:** Create a new command-line tool.
    - **Steps:**
      1. Implement the tool script (e.g., in `tools/` directory) using `edit_file`.
      2. Add/update the tool's definition in the `<command_line_tools>` section of *this* `.cursorrules` file using `edit_file`. Ensure `tool` is set to `run_terminal_cmd`.
      3. Test the new tool using `run_terminal_cmd`.
      4. Use the `<fix>` action flow to debug any issues until the tool executes successfully.
  </invent>

  <commit>
    - **Goal:** Commit current changes to git.
    - **Steps:**
      1. Use `run_terminal_cmd` to run `git add .`.
      2. Use `run_terminal_cmd` to run `git commit -m "feat: [Descriptive summary of changes]"`. Adapt the message prefix (e.g., `fix:`, `docs:`, `chore:`) as appropriate.
  </commit>

  <implement_ai>
    - **Goal:** Implement AI/LLM features, like Gemini prompts or functions.
    - **Steps:**
      1. **Review Examples:** Read `tools/gemini.ts` using `read_file` to understand existing patterns.
      2. **Implement:** Use `edit_file` to add the AI logic.
      3. **Library Usage:** **Crucially**, always import and use the `@google/genai` library, *not* the older `generativeai` package.
      4. **Integration:** Integrate the AI logic into relevant frontend or backend components as needed, potentially using the `<develop>` action.
      5. **Testing:** Ensure the feature is tested, potentially using the `<validate>` action.
  </implement_ai>
</actions>

## Request Processing Steps
Follow these steps sequentially for **every** user request:

1.  **Tool Use Check:** If the user *explicitly* requests to use a specific tool (internal or command-line), execute that tool using the appropriate method (`run_terminal_cmd` for command-line tools) and respond with the result. **Stop processing here.**
2.  **Initial Analysis:**
    *   Read the user request carefully.
    *   Consult `<documentation>` (`read_file`) and potentially fetch relevant rules (`fetch_rules`) to understand context.
    *   Identify the primary goal (e.g., fix a bug, develop a feature, answer a question).
    *   Determine the most relevant `<action>` (e.g., `<fix>`, `<develop>`, `<research>`). If no single action fits perfectly, default to `<research>` to gather more information or clarify.
    *   List affected architecture areas (frontend, backend, database, tests, docs).
    *   **Present Analysis:**
        ```
        Request type: [Inferred type, e.g., Bug Fix, Feature Development, Documentation Update, Tool Execution, Research]
        Primary Action: [<Chosen action, e.g., fix>]
        Affected Areas: [List areas]
        ```
3.  **Task Planning (if complex):**
    *   If the required action involves multiple steps or sub-tasks (especially for `<develop>`, `<validate>`, `<design>`), break it down.
    *   Use `edit_file` to add these sub-tasks to `docs/todo.md` under a relevant heading, marking them as ❌ (not started). Include necessary steps like development, testing, and documentation updates for each sub-task.
    *   Inform the user that the plan has been added to `docs/todo.md`.
4.  **Action Execution:**
    *   State: `Starting Action: <action name>...`
    *   Execute the steps defined within the chosen `<action>` in the section above. Follow instructions within the action description carefully, including reading required files and using specified tools.
    *   Adhere strictly to the `<behavior_rules>` during execution.
    *   State: `Completed Action: <action name>.`
5.  **Confirmation & Iteration:**
    *   If the task involved multiple planned sub-tasks (from step 3) or the primary action implies follow-up (like `<research>` often leads to `<develop>` or `<fix>`), ask: "Would you like to proceed to the next step/action ([mention next logical step if clear]) or do you need any adjustments?"
    *   **Wait for explicit user confirmation ('yes', 'proceed', 'continue', etc.) before starting the next action or major step.** If the user requests adjustments, go back to step 2 for re-analysis based on the new input.
6.  **Final Recording (on task completion):**
    *   Once the *entire* user request is fulfilled (which might involve multiple actions and confirmations):
        *   Summarize all significant changes made.
        *   Execute the `<record>` action to update `ai_changelog.md` and `todo.md`.
        *   If applicable (e.g., after a `<fix>` or `<invent>`), ensure `learnings.md` was updated during the relevant action.

## Behavior Rules (Strictly Follow)
- **Existing Project:** NEVER create a new project. Analyze the existing structure via `list_dir`, `<documentation>`, and code search.
- **Up-to-date Info:** Do NOT rely solely on internal knowledge for libraries or external APIs. ALWAYS use `web_search` to verify current documentation, versions, and best practices when implementing or fixing related code.
- **Latest Libraries:** When adding dependencies, prefer the latest stable versions unless otherwise specified.
- **Cautious Edits:** Be extremely careful when modifying existing code. Use `codebase_search` or `grep_search` to understand potential usages elsewhere. Avoid deleting code unless explicitly requested or clearly redundant after refactoring.
- **Follow Instructions:** Read and follow all instructions within the chosen `<action>` and these general rules precisely.
- **Exact Request Fulfillment:**
    - Implement *only* what the user explicitly asks for. No extra features, enhancements, or refactoring unless requested.
    - Confirm your solution addresses *all* parts of the request.
    - **Crucial:** Ask yourself before finalizing changes: "Am I adding anything not explicitly requested?"
- **Simplicity:** Prefer the simplest, most direct solution that meets all requirements. Minimize code complexity.
- **Tool Usage:** Use the provided tools (`<tools>`, `<command_line_tools>`) whenever appropriate to interact with the filesystem, codebase, web, or terminal. Explain *why* you are using a tool *before* calling it.
- **Clarity:** Communicate clearly. State your plan, actions, and results. Ask clarifying questions if the request is ambiguous.
