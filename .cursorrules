# Optimized Agentic Coding Instructions for Gemini

<project>
This is a NextJS 15 / React 19 / Typescript / Tailwind CSS application with Vitest and Cypress test frameworks.
</project>

<tools>
# Internal Tools: Core capabilities available directly.
run_terminal_cmd - Executes terminal commands
  - Parameters: command, is_background, explanation
codebase_search - Semantic codebase search
  - Parameters: query, explanation, target_directories
read_file - Reads file contents between specific lines or the entire file (use sparingly), showing max 250 lines.
  - Parameters: 
    - target_file (required): The path of the file to read. Can be relative to workspace or absolute.
    - should_read_entire_file (optional): Set to true to read the entire file. If true, other line parameters are ignored.
    - offset (optional): The line number to start reading from (1-indexed).
    - limit (optional): The number of lines to read (maximum 250, minimum 150).
  - Usage patterns:
    - To read the entire file: Provide only target_file and should_read_entire_file=true
    - To read specific lines: Provide target_file with offset and limit
    - To read from beginning: Provide target_file with limit only
  - Example: `read_file target_file="path/to/file.txt" offset=10 limit=200`
list_dir - Lists directory contents
  - Parameters: relative_workspace_path, explanation
grep_search - Regex search in text
  - Parameters: query, case_sensitive, exclude_pattern, explanation, include_pattern
edit_file - Proposes file edits
  - Parameters: code_edit, instructions, target_file
file_search - Fuzzy file path search
  - Parameters: explanation, query
delete_file - Deletes files
  - Parameters: target_file, explanation
reapply - Reapplies last edit
  - Parameters: target_file
fetch_rules - Fetches user-provided rules (@*.mdc files)
  - Parameters: rule_names
web_search - Searches the web for information
  - Parameters: search_term, explanation
mcp_puppeteer_puppeteer_navigate - Navigate to a URL
  - Parameters: url
mcp_puppeteer_puppeteer_screenshot - Take a screenshot
  - Parameters: name, height, selector, width
mcp_puppeteer_puppeteer_click - Click an element
  - Parameters: selector
mcp_puppeteer_puppeteer_fill - Fill out an input field
  - Parameters: selector, value
mcp_puppeteer_puppeteer_select - Select an element
  - Parameters: selector, value
mcp_puppeteer_puppeteer_hover - Hover an element
  - Parameters: selector
mcp_puppeteer_puppeteer_evaluate - Execute JavaScript
  - Parameters: script
mcp_supabase_query - Run a read-only SQL query to project database
  - Parameters: sql
</tools>

<command_line_tools>
# Project-Specific Tools: Execute these using `run_terminal_cmd`.
{
  "tools": {
    "translations": {
      "description": "Tools for managing translations and localization",
      "tool": "run_terminal_cmd",
      "command": "npm run",
      "options": {
        "check-translations": "Compare English, Finnish and Swedish translation files for completeness and missing keys",
        "import-translations:local": "Import translations for local development environment",
        "import-translations:prod": "Import translations for production environment"
      }
    },
    "seed": {
      "description": "Tools for seeding development and production data",
      "tool": "run_terminal_cmd",
      "command": "npm run",
      "options": {
        "seed:users": "Seed users data for development environment",
        "seed:users:local": "Seed users data for local development",
        "seed:users:prod": "Seed users data for production environment",
        "seed:blog:local": "Seed blog data for local development",
        "seed:blog:prod": "Seed blog data for production environment"
      }
    },
    "supabase": {
      "description": "Manages Supabase database migrations, schema updates, and content seeding",
      "tool": "run_terminal_cmd",
      "command": "supabase",
      "options": {
        "migration": {
          "new": "Create a new migration file"
        },
        "db": {
          "push": "Push database migration changes",
          "reset": "Reset the database"
        },
      },
    },
    "image-optimizer": {
      "description": "Optimizes images with background removal, resizing, and format conversion using Sharp and Replicate's remove-bg model",
      "tool": "run_terminal_cmd",
      "command": "npm run optimize-image",
      "options": {
        "input": "Path to input image",
        "output": "Path to output image",
        "remove-bg": "(Optional) Remove image background using AI",
        "resize": "(Optional) Resize image (format: WIDTHxHEIGHT, e.g. 800x600)",
        "format": "(Optional) Convert to format (png, jpeg, or webp)",
        "quality": "(Optional) Set output quality (1-100, default: 80)"
      },
      "requires": [
        "REPLICATE_API_TOKEN in .env",
        "sharp package (npm install sharp)"
      ],
      "example": "npm run optimize-image -- input.png output.webp --resize 512x512 --format webp --quality 90"
    },
    "html-to-md": {
      "description": "Scrapes a webpage and converts its HTML content to Markdown format using Turndown service",
      "tool": "run_terminal_cmd",
      "command": "npm run html-to-md",
      "options": {
        "url": "URL of the webpage to scrape",
        "output": "(Optional) Output file path for the markdown (default: output.md)",
        "selector": "(Optional) CSS selector to target specific content"
      },
      "requires": [
        "Node.js >= 14",
        "turndown package",
        "axios package"
      ],
      "example": "npm run html-to-md -- --url https://example.com --output docs/scraped.md --selector main"
    },
    "gemini": {
      "description": "Interacts with Google's Gemini API for text generation, chat, multimodal tasks, document analysis, and grounded search. **Gemini Prompting Tip:** Structure prompts clearly defining the **Task**, providing relevant **Context** (from files, URLs, codebase), desired **Format**, and optionally a **Persona**. Use the `--ground` flag for answers needing up-to-date web info.",
      "tool": "run_terminal_cmd",
      "command": "npm run gemini",
      "options": {
        "prompt": "Text prompt or question for the model",
        "model": "(Optional) Model to use: 'gemini-2.0-flash' (default), 'gemini-2.5-pro-exp-03-25'",
        "temperature": "(Optional) Sampling temperature between 0.0 and 1.0 (default: 0.7)",
        "max-tokens": "(Optional) Maximum tokens to generate (default: 2048)",
        "image": "(Optional) Path to image file for vision tasks",
        "file": "(Optional) Path to local file (PDF, DOCX, TXT, etc.) for document analysis",
        "url": "(Optional) URL to a document to analyze (PDF, DOCX, TXT, etc.)",
        "mime-type": "(Optional) MIME type of the file (e.g., application/pdf, default: auto-detected)",
        "chat-history": "(Optional) Path to JSON file containing chat history",
        "stream": "(Optional) Stream the response (default: false)",
        "safety-settings": "(Optional) JSON string of safety threshold configurations",
        "schema": "(Optional) JSON schema for structured output",
        "json": "(Optional) Return structured JSON data. Available types: recipes, tasks, products, custom",
        "ground": "(Optional) Enable Google Search grounding for up-to-date information (default: false)",
        "show-search-data": "(Optional) Show the search entries used for grounding (default: false)"
      },
      "requires": [
        "GOOGLE_AI_STUDIO_KEY in .env",
        "@google/genai package",
        "node-fetch package"
      ],
      "example": "npm run gemini -- --prompt \"What is the capital of France?\" --model gemini-2.0-flash-001 --temperature 0.7",
      "advanced_examples": [
        "# Process a PDF document from a URL",
        "npm run gemini -- --prompt \"Summarize this document in 5 key points\" --url \"https://discovery.ucl.ac.uk/id/eprint/10089234/1/343019_3_art_0_py4t4l_convrt.pdf\"",
        "",
        "# Process a local PDF file",
        "npm run gemini -- --prompt \"What is this document about?\" --file test/data/sample.pdf",
        "",
        "# Process a text file with specific MIME type",
        "npm run gemini -- --prompt \"Expand on this information\" --file test/data/sample.txt --mime-type text/plain",
        "",
        "# Get grounded search results with real-time information",
        "npm run gemini -- --prompt \"When is the next total solar eclipse in North America?\" --ground --show-search-data",
        "",
        "# Generate structured JSON data with predefined schema (recipes)",
        "npm run gemini -- --prompt \"List 3 popular cookie recipes\" --json recipes",
        "",
        "# Generate structured JSON data with predefined schema (tasks)",
        "npm run gemini -- --prompt \"Create a task list for planning a vacation\" --json tasks",
        "",
        "# Generate structured JSON data with predefined schema (products)",
        "npm run gemini -- --prompt \"List 3 smartphone models\" --json products",
        "",
        "# Use a custom JSON schema for structured output",
        "npm run gemini -- --prompt \"List 3 programming languages and their use cases\" --json custom --schema '{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"language\":{\"type\":\"string\"},\"year\":{\"type\":\"integer\"},\"useCases\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}}},\"required\":[\"language\",\"useCases\"]}}'"
      ]
    },
    "gemini-image": {
      "description": "Generates and edits images using Google Gemini and Imagen models. **Gemini Prompting Tip:** Be descriptive in your **Prompt** (Task), specify **Model** and visual **Context** (style, colors, elements), and desired **Format** (output file, aspect ratio).",
      "tool": "run_terminal_cmd",
      "command": "node tools/gemini-image-tool.js",
      "subcommands": {
        "generate": {
          "description": "Generate an image using Gemini 2.0 or Imagen 3.0",
          "options": {
            "prompt": "Required: Text prompt for image generation",
            "model": "(Optional) Model to use: 'gemini-2.0' (default) or 'imagen-3.0'",
            "output": "(Optional) Output file path (default: gemini-generated-image.png)",
            "folder": "(Optional) Output folder path (default: public/images)",
            "num-outputs": "(Optional) Number of images (Imagen 3 only, default: 1, max: 4)",
            "negative-prompt": "(Optional) Negative prompt (Imagen 3 only)",
            "aspect-ratio": "(Optional) Aspect ratio (Imagen 3 only, default: 1:1, options: 1:1, 16:9, 9:16, 4:3, 3:4)"
          },
          "example": "node tools/gemini-image-tool.js generate -p \"A futuristic car\" -m imagen-3.0 -n 2 --aspect-ratio 16:9 -o car.png"
        },
        "edit": {
          "description": "Edit an existing image using Gemini 2.0",
          "options": {
            "input-image": "Required: Path to the input image",
            "edit-prompt": "Required: Text prompt describing the edit",
            "output": "(Optional) Output file path (default: gemini-edited-image.png)",
            "folder": "(Optional) Output folder path (default: public/images)"
          },
          "example": "node tools/gemini-image-tool.js edit -i input.png -p \"Add sunglasses to the person\" -o edited.png"
        }
      },
      "requires": [
        "GOOGLE_AI_STUDIO_KEY or GEMINI_API_KEY in .env.local",
        "@google/genai package",
        "commander package",
        "axios package",
        "dotenv package"
      ]
    },
    "download-file": {
      "description": "Downloads files from URLs with progress tracking, automatic file type detection, and customizable output paths",
      "tool": "run_terminal_cmd",
      "command": "npm run download-file",
      "options": {
        "url": "URL of the file to download",
        "output": "(Optional) Complete output path including filename",
        "folder": "(Optional) Output folder path (default: downloads)",
        "filename": "(Optional) Output filename (if not provided, derived from URL or content)"
      },
      "requires": [
        "axios package",
        "cli-progress package",
        "mime-types package"
      ],
      "example": "npm run download-file -- --url https://example.com/image.jpg --folder public/images --filename downloaded-image.jpg"
    },
    "generate-video": {
      "description": "Generates videos using various Replicate API models including Minimax, Hunyuan, Mochi, and LTX",
      "tool": "run_terminal_cmd",
      "command": "npm run generate-video",
      "options": {
        "prompt": "Text description of the desired video",
        "model": "(Optional) Model to use: minimax (default), hunyuan, mochi, or ltx",
        "duration": "(Optional) Duration of the video in seconds (model-specific limits apply)",
        "image": "(Optional) Path to input image for image-to-video generation",
        "output": "(Optional) Output filename",
        "folder": "(Optional) Output folder path (default: public/videos)"
      },
      "requires": [
        "REPLICATE_API_TOKEN in .env",
        "replicate package",
        "ora package",
        "chalk package"
      ],
      "example": "npm run generate-video -- --prompt \"A serene ocean wave rolling onto a beach\" --model minimax --duration 5 --output beach-wave.mp4"
    },
    "remove-background-advanced": {
      "description": "Advanced background removal tool using Sharp with color tolerance and edge detection",
      "tool": "run_terminal_cmd",
      "command": "npm run remove-background-advanced",
      "options": {
        "input": "Path to input image",
        "output": "Path to output image",
        "tolerance": "(Optional) Color tolerance for background detection (0-255, default: 30)"
      },
      "requires": ["sharp package"],
      "example": "npm run remove-background-advanced -- --input input.png --output output.png --tolerance 40"
    }
  }
}
</command_line_tools>

<documentation>
  ## Documentation and Context Files
  Reference these files for understanding the project. Use `read_file` for `@*.md` files. Use `Workspace_rules` for `@*.mdc` files. **Crucially, incorporate relevant details from these into prompts for Gemini.**
    - `@description.md`: App description, use cases, features.
    - `@architecture.md`: Tech stack, folder structure, testing frameworks.
    - `@datamodel.md`: Entities, attributes, relationships.
    - `@frontend.md`: Views/screens, UI/UX patterns, styling.
    - `@backend.md`: API endpoints, authentication, service architecture.
    - `@todo.md`: Task list (✅ done, ⏳ in progress, ❌ not started). Update status, don't remove tasks.
    - `@ai_changelog.md`: Log of changes made by AI. Add concise summaries here.
    - `@learnings.md`: Technical learnings, best practices, error solutions. Add new findings here.
    - `/.cursor/rules/@add-data-model.mdc`: How to add a new data model.
    - `/.cursor/rules/@admin-api-protection.mdc`: How to protect the admin API.
    - `/.cursor/rules/@implement-frontend-page.mdc`: How to implement a new frontend page.
    - `/.cursor/rules/@implement-nextjs-api.mdc`: How to implement a new NextJS API route.
    - `/.cursor/rules/@implement-unit-tests.mdc`: How to implement unit tests.
    - `@package.json`: List of used npm packages and versions.
    - `lib/@brand-info.ts`: Brand information for content generation.

  **Link Handling:**
    - For `@filename.ext` links: Use `read_file` to access their content. Extract key info for prompts.
    - For `http://` or `https://` links: Use `web_search` or the `gemini` tool with `--url` or `--ground` to get information from the URL if needed for the task (e.g., documentation, error context). Do not assume direct access without a tool.
</documentation>

## Core Actions & Workflow
Define high-level tasks. Follow the `## Request Processing Steps` below to execute these. **Focus on clear, precise instructions and leverage context for Gemini.**

<actions>
  <use_tools>
    - **Goal:** Execute project-specific tools listed under `<command_line_tools>`.
    - **Steps:**
      1. Identify the correct command and options based on the user request and tool definition.
      2. **Formulate Prompt (for `gemini` tools):** Structure the prompt clearly using Persona, Task, Context, Format (PTCF).
      3. Explain *why* the tool is being used and *how* the prompt is structured.
      4. Use `run_terminal_cmd` to execute the command.
      5. Review output and iterate with refined prompts if necessary.
  </use_tools>

  <document>
     - **Goal:** Update documentation files.
     - **Steps:**
       1. Read relevant documentation files (`@*.md`).
       2. **Formulate Prompt (for `edit_file`):** Clearly state the Task (update needed), Context (based on task, readings), and Format (how the update should look).
       3. Use `edit_file` to propose necessary updates. Focus on specific files mentioned in `<documentation>`.
       4. Review proposed changes and iterate if needed.
  </document>

  <research>
  - **Goal:** Understand a task or topic thoroughly before planning.
  - **Steps:**
    1. **Gather Context:**
        - Read relevant `@*.md` files from `<documentation>` (`read_file`).
        - Fetch relevant `@*.mdc` rules using `Workspace_rules`.
        - Use `codebase_search` to find relevant existing code snippets.
        - Use the `gemini` tool (with `--prompt`, `--file`, `--url`, or `--ground`) for targeted analysis, summarization, or Q&A based on specific context or up-to-date info.
        - Use `web_search` for broader exploration or finding specific external resources/documentation.
    2. **Analyze & Plan:**
        - Synthesize gathered information.
        - Outline the plan: What needs to be done? What tools are required? How will prompts be structured?
        - Identify any missing information needed from the user.
    3. **Present Findings:** Clearly state the analysis, plan, and any questions for the user.
  </research>

  <complete>
   - **Goal:** Complete a full task independently, following instructions precisely.
   - **Steps:**
     1. Break down the overall goal into clear, sequential sub-tasks.
     2. Execute sub-tasks using appropriate actions and tools, providing precise instructions and context in prompts.
     3. Iterate on sub-task outputs if refinement is needed.
     4. Continue until all sub-tasks are completed.
     5. Return and respond to user with the completed result.
  </complete>

  <localise>
   - **Goal:** Translate or adapt content for different locales/languages.
   - **Steps:**
     1. Read available languages from `/messages` folder (`list_dir`, `read_file`).
     2. Read needed documentation (`@description.md`, etc.) and `lib/@brand-info.ts` (`read_file`) to understand context and brand voice.
     3. **Formulate Prompt (for `gemini` tool or `edit_file`):** Define the Task (translate text), provide rich Context (source text, target language, brand voice, target audience, cultural notes), and specify Format (natural tone, local conventions for numbers/dates). Assign a Persona ('You are a native [language] translator...').
     4. Use the `gemini` tool (`run_terminal_cmd`) or `edit_file` to generate/insert translations.
     5. Review generated translations for naturalness and accuracy; iterate if necessary.
  </localise>

  <fix>
  - **Goal:** Diagnose and resolve an error precisely.
  - **Steps:**
    1. **Gather Context:**
        - Read `@learnings.md` for previous solutions (`read_file`).
        - If error messages contain URLs, use `web_search` or `gemini --url` to understand them.
        - Use `gemini --prompt "[error message]" --ground` or `web_search` for general error resolution info.
        - Fetch relevant `@*.mdc` rules (`Workspace_rules`).
        - Use `codebase_search` or `grep_search` to find relevant code.
    2. **Iterative Fixing Loop:**
        a. **Hypothesize:** Based on context, identify 1-2 likely causes.
        b. **Validate Hypothesis (Optional):** Use `edit_file` (with clear instructions) to add temporary logging, then use `run_terminal_cmd` to run relevant tests/code and observe logs.
        c. **Implement Fix:** Formulate a precise prompt for `edit_file` detailing the code change (Task), referencing context (Context), and expected format (Format).
        d. **Validate Fix:** Use `run_terminal_cmd` to run tests or execute the relevant code path.
        e. **Record Outcome:**
            - If fixed: Update `@learnings.md` (`edit_file`). Delete `/temp/fix_backlog.md` if exists (`delete_file`).
            - If not fixed: Update `/temp/fix_backlog.md` (`edit_file`). Return to step (a). *Do not loop more than 3 times without asking the user.*
  </fix>

  <validate>
  - **Goal:** Implement and run tests, fixing any failures precisely.
  - **Steps:**
    1. **Understand Requirements:**
        - Read `@architecture.md` (`read_file`).
        - Fetch `@implement-unit-tests.mdc` rule (`Workspace_rules`).
    2. **Write Unit Tests:**
        - **Formulate Prompt:** Instruct `edit_file` with Task (write tests for specific component/function), Context (component code, requirements from rules/docs), and Format (using Vitest framework).
        - Use `edit_file` to create/update `__tests__/*.test.ts`.
    3. **Run & Fix Unit Tests:**
        - Execute tests: `run_terminal_cmd "npm test"`.
        - If errors: Use the `<fix>` action flow.
    4. **Write E2E Tests:**
        - **Formulate Prompt:** Instruct `edit_file` with Task (write E2E test for user flow), Context (relevant pages/components, user story), and Format (using Cypress).
        - Use `edit_file` to create/update `cypress/`.
    5. **Run & Fix E2E Tests:**
        - Execute tests: `run_terminal_cmd "npm run cypress:run"`.
        - If errors: Use the `<fix>` action flow.
    6. **Document:** Ensure fixes are logged in `@learnings.md` via the `<fix>` action.
    7. **Repeat:** Continue until relevant tests pass.
  </validate>

  <record>
   - **Goal:** Document completed work and update the task backlog.
   - **Steps:**
     1. Use `edit_file` (with clear instructions) to add a summary to `@ai_changelog.md`.
     2. Use `edit_file` (with clear instructions) to update the status (✅, ⏳, ❌) in `@todo.md`. **Do not remove tasks.**
  </record>

  <design>
   - **Goal:** Design a frontend feature.
   - **Steps:**
     1. Read `@frontend.md` (`read_file`).
     2. **Formulate Design Prompt:** Instruct `edit_file` to update `@frontend.md` with Task (describe design), Context (feature requirements, UI/UX guidelines), and Format (components, layout, flow description).
     3. Use `edit_file` to update `@frontend.md`.
     4. **Generate Assets:** Use `run_terminal_cmd` with `gemini-image` (prefer `imagen` or `gemini` models). Provide clear prompts (Task: generate image, Context: style, elements, colors, Format: output path like `public/images`, aspect ratio).
     5. **Optimize Assets:** Use `run_terminal_cmd` with `image-optimizer`.
     6. Review design and assets, iterate using `edit_file` or `gemini-image` if needed.
     7. Briefly summarize the design and assets for the user.
  </design>

  <develop>
   - **Goal:** Implement the code for a feature (frontend/backend).
   - **Steps:**
     1. Fetch relevant rules (`@implement-*.mdc`) using `Workspace_rules`.
     2. Read relevant context files (`@description.md`, `@datamodel.md`, etc.) using `read_file`.
     3. **Formulate Code Prompt:** Instruct `edit_file` with Task (implement feature/component/API), rich Context (requirements from rules/docs, related code snippets, data model), and Format (coding standards, imports). Assign Persona ('You are a Senior NextJS/React Developer...').
     4. Use `edit_file` to propose code changes across necessary files.
     5. Review proposed code and iterate with follow-up `edit_file` prompts if necessary.
  </develop>

  <invent>
    - **Goal:** Create a new command-line tool.
    - **Steps:**
      1. **Formulate Implementation Prompt:** Instruct `edit_file` with Task (implement script logic), Context (tool purpose, desired functionality), and Format (Node.js script in `tools/`).
      2. Implement the tool script using `edit_file`.
      3. **Formulate Definition Prompt:** Instruct `edit_file` to update the `<command_line_tools>` section of *this file* with the new tool definition (Task), ensuring `tool: "run_terminal_cmd"`.
      4. Add/update the tool definition using `edit_file`.
      5. Test the new tool using `run_terminal_cmd`.
      6. Use the `<fix>` action flow to debug until successful execution.
  </invent>

  <commit>
    - **Goal:** Commit current changes to git.
    - **Steps:**
      1. Use `run_terminal_cmd` to run `git add .`.
      2. Use `run_terminal_cmd` to run `git commit -m "feat: [Descriptive summary of changes]"`. Adapt prefix (e.g., `fix:`, `docs:`, `chore:`) as appropriate.
  </commit>

  <implement_ai>
    - **Goal:** Implement AI/LLM features using Gemini.
    - **Steps:**
      1. **Review Examples:** Read `tools/gemini.ts` (`read_file`) if exists.
      2. **Formulate AI Logic Prompt:** Instruct `edit_file` with Task (implement Gemini interaction logic), Context (feature goal, desired input/output, using `@google/genai` library), and Format (Typescript function/class). Apply PTCF principles to the prompts *within* the code being written.
      3. Implement the AI logic using `edit_file`. **Crucially: Use `@google/genai`, not `generativeai`.**
      4. **Integrate:** Use the `<develop>` action to integrate the AI logic into relevant components/routes.
      5. **Test:** Use the `<validate>` action to ensure the feature works correctly.
      6. Review and iterate on prompts and code as needed.
  </implement_ai>
</actions>

<behavioral_rules>
- **Existing Project:** NEVER create a new project. Analyze existing structure.
- **Up-to-date Info:** Do NOT rely solely on internal knowledge. ALWAYS use `web_search` or `gemini --ground` to verify external API/library documentation, versions, and best practices.
- **Latest Libraries:** Prefer latest stable versions for dependencies.
- **Cautious Edits:** Use `codebase_search`/`grep_search` to understand impact before modifying existing code. Avoid deletions unless clearly required.
- **Follow Instructions:** Adhere precisely to `<action>` steps and these rules.
- **Persistence:** Be persistent, do not give up. Don't stop when you have not completed the task. 
- **Simplicity:** Prefer the simplest, most direct solution meeting all requirements.
- **Tool Usage:** Use provided tools appropriately. Explain *why* a tool is used and *how* the prompt is constructed (especially for Gemini).
- **Clarity:** Communicate plans, actions, results clearly. Ask clarifying questions if ambiguous.

### Model-Specific Behavior:
- **For Claude (Anthropic):**
    - **Exact Request Fulfillment:** Implement *only* what is explicitly asked. No extras.
    - Confirm all parts of the request are addressed, nothing more.
    - Ask: "Am I adding anything not explicitly requested?" If yes, remove it.
    - Avoid suggesting alternatives unless asked.

- **For Gemini (Google):**
    - **Follow Instructions Precisely:** Execute user instructions exactly as written.
    - **Adhere Strictly:** Follow the specified workflow and action steps rigorously.
    - **Maintain Structure:** Use consistent formatting as specified.
    - **Leverage Context:** Actively incorporate context from documentation (`@*.md`), rules (`@*.mdc`), codebase searches (`codebase_search`), and files/URLs into prompts.
    - **Iterate When Necessary:** Refine outputs through follow-up prompts if needed.

- **For GPT (OpenAI) and Grok (X.AI):**
    - Be complete, aim for full task completion per run.
    - Only ask user for major decisions.
</behavioral_rules>
## Request Processing Steps
Follow these steps sequentially for **every** user request and follow behavioral rules above:

1.  **Tool Use Check:** If the user *explicitly* requests a specific tool, execute it using the `<use_tools>` action and respond. **Stop processing here.**
2.  **Initial Analysis:**
    * Read the user request carefully.
    * Consult `<documentation>` (`read_file`) and potentially fetch rules (`Workspace_rules`) for context.
    * Identify the primary goal.
    * Determine the most relevant `<action>`. Default to `<research>` if unclear.
    * List affected architecture areas.
    * **Present Analysis:**
        ```
        Request type: [Inferred type]
        Primary Action: [<Chosen action>]
        Affected Areas: [List areas]
        Plan Overview: [Briefly mention key steps/tools, e.g., "Read docs, formulate prompt for edit_file, run tests"]
        ```
3.  **Task Planning (if complex):**
    * For multi-step actions (`<develop>`, `<validate>`, `<design>`), break down into sub-tasks.
    * Use `edit_file` to add sub-tasks to `@todo.md` (marked ❌). Include development, testing, documentation steps.
    * Inform the user the plan is in `@todo.md`.
4.  **Action Execution:**
    * State: `Starting Action: <action name>...`
    * Execute steps within the chosen `<action>`, focusing on providing **clear, context-rich prompts** to tools like `edit_file` and `run_terminal_cmd` (especially for `gemini` tools).
    * Adhere strictly to `<behavior_rules>`.
    * Review outputs and iterate with follow-up prompts if necessary.
    * State: `Completed Action: <action name>.`
5.  **Final Recording (on task completion):**
    * Once the *entire* request is fulfilled:
        * Summarize significant changes.
        * Execute `<record>` action (update `@ai_changelog.md`, `@todo.md`).
        * Ensure `@learnings.md` was updated during `<fix>` or `<invent>` actions if applicable.